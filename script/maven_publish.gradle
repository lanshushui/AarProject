apply plugin: 'maven-publish'
apply from: file("${rootDir}/script/utils.gradle")
// 上传源码的 task
task androidSourcesJar(type: Jar) {
    // 如果有Kotlin那么就需要打入dir : getSrcDirs
    if (project.hasProperty("kotlin")) {
        //println '====> project kotlin'
        from android.sourceSets.main.java.getSrcDirs()
    } else if (project.hasProperty("android")) {
        //println '====> project java'
        from android.sourceSets.main.java.sourceFiles
    } else {
        //println '====> project java & kotlin'
        from sourceSets.main.allSource
    }
    archiveClassifier = "code-sources"
}
def aarConfigManager = gradle.ext.aarConfigManager

afterEvaluate {
    String GROUP_ID = aarConfigManager.getGroupId(it)
    String ARTIFACT_ID = aarConfigManager.getArtifactId(it)
    String VERSION = aarConfigManager.getVersion(it)
    //默认值
    def nextVersion = "1.${System.currentTimeMillis()}"
    //若存在已经发布的版本
    if (VERSION != "0") {
        String[] datas = VERSION.split("\\.")
        if (datas.length == 2) {
            int v = Integer.parseInt(datas[0])
            nextVersion = "${v + 1}.${System.currentTimeMillis()}"
        }
    }
    publishing {
        // 配置maven 仓库
        repositories { RepositoryHandler handler ->
            handler.maven {
                url "${rootDir}/local_repo/"
            }
        }
        publications { PublicationContainer publicationContainer ->
            release(MavenPublication) {
                from components.release
//                artifact androidSourcesJar // 上传源码
                groupId = GROUP_ID
                artifactId = ARTIFACT_ID
                version = nextVersion
            }
        }
    }
    ////////////为AAr专门配置的方法   ////////////////
    task("publishAAr", group: "publishing") {
        doLast {
            String path = project.path
            String cmd = "gradlew ${path}:publishReleasePublicationToMavenRepository"
            rootProject.exec {
                commandLine 'cmd','/c',cmd
            }
            String curVersion = project.publishing.publications.release.version
            println("${path} 发布了AAr,版本为 ${curVersion}")
            aarConfigManager.updateAarVersion(path, curVersion)
        }
    }
}