//发布组件时为了防止pom错误，不能存在project依赖
def projectPath = gradle.startParameter.projectProperties.get("projectPath")
if (isPublishTask(gradle) && projectPath == project.path) {
    configurations.configureEach { config ->
        config.getAllDependencies().forEach {
            if (it instanceof ProjectDependency && it.getDependencyProject() != project) {
                String msg = "发布aar时，不能依赖源码modlue $it"
                println(msg)
                throw new Exception(msg)
            }
        }
    }
}

//针对子项目 的aar任务
def getNextVersion = { VERSION ->
    //默认值
    def nextVersion = "1.${System.currentTimeMillis()}"
    //若存在已经发布的版本
    if (VERSION != "0") {
        String[] datas = VERSION.split("\\.")
        if (datas.length == 2) {
            int v = Integer.parseInt(datas[0])
            nextVersion = "${v + 1}.${System.currentTimeMillis()}"
        }
    }
    return nextVersion
}
def publishAArMethod = {
    String path = project.path
    def aarConfigManager = gradle.ext.aarConfigManager
    def version = aarConfigManager.getVersion(project)
    String nextVersion = getNextVersion(version)
    String cmd = "gradlew ${path}:publishReleasePublicationToMavenRepository -PprojectPath=${path} -Pversion=${nextVersion}"
    rootProject.exec {
        commandLine 'cmd', '/c', cmd
    }.rethrowFailure()
    println("${path} 发布了AAr,版本为 ${nextVersion}")
    aarConfigManager.updateAarVersion(path, nextVersion)
}
project.ext.publishAArMethod = publishAArMethod
task("publishAAr", group: "publishing") {
    doLast {
        publishAArMethod()
    }
}